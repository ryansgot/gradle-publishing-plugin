buildscript {
    ext.keys = [
            'aws': [
                    'accessKeyId': project.hasProperty("awsMavenAccessKey") ? project.property("awsMavenAccessKey") : "${System.env.AWS_ACCES_KEY_ID}",
                    'secretKey': project.hasProperty("awsMavenSecretKey") ? project.property("awsMavenSecretKey") : "${System.env.AWS_SECRET_KEY}",
            ]
    ]

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
    }
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group 'com.fsryan.gradle'
version '0.1.3'

repositories {
    jcenter()
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    testCompile 'junit:junit:4.12'
}

def siteUrl = 'https://github.com/ryansgot/gradle-publishing-plugin'

publishing {
    repositories {
        maven {
            name 'releaseS3'
            url 's3://repo.fsryan.com/release'
            credentials(AwsCredentials) {
                accessKey = keys.aws.accessKeyId
                secretKey = keys.aws.secretKey
            }
        }
        maven {
            name 'snapshotS3'
            url 's3://repo.fsryan.com/snapshot'
            credentials(AwsCredentials) {
                accessKey = keys.aws.accessKeyId
                secretKey = keys.aws.secretKey
            }
        }
        maven {
            name = "releaseOSSRH"
            url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username =  project.findProperty("com.fsryan.ossrh.release.username") ?: ""
                password =  project.findProperty("com.fsryan.ossrh.release.password") ?: ""
            }
        }
        maven {
            name = "snapshotOSSRH"
            url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            credentials {
                username =  project.findProperty("com.fsryan.ossrh.snapshot.username") ?: ""
                password =  project.findProperty("com.fsryan.ossrh.snapshot.password") ?: ""
            }
        }
    }
    publications {
        plugin(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId 'fsryan-gradle-publishing'
            version project.version

            pom {
                licenses {
                    license {
                        name = "The Apache Software License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution = "repo"
                    }
                }
                developers {
                    developer {
                        id = 'fsryan'
                        name = 'Ryan Scott'
                        email = 'fsryan.developer@gmail.com'
                    }
                }
                scm {
                    connection = "${siteUrl}.git".toString()
                    developerConnection = "${siteUrl}.git".toString()
                    url = siteUrl
                }
                withXml {
                    def root = asNode()
                    root.appendNode('description', 'Gradle plugin providing tasks for publishing libraries to a maven repository')
                    root.appendNode('packaging', 'jar')
                    root.appendNode('name', 'fsryan-gradle-publishing')
                    root.appendNode('url', siteUrl)
                    root.children().last()
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.groovy.srcDirs
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

signing {

    if (project.hasProperty("signing.keyId")) {
        if (project.hasProperty("signing.password")) {
            if (project.hasProperty("signing.secretKeyRingFile")) {
                sign(publishing.publications)
            } else {
                println("Missing signing.secretKeyRingFile: cannot sign ${project.name}")
            }
        } else {
            println("Missing signing.password: cannot sign ${project.name}")
        }
    } else {
        println("Missing signing.keyId: cannot sign ${project.name}")
    }
}

afterEvaluate {
    def releaseTask = project.task("release", dependsOn: ["publishPluginPublicationToReleaseOSSRHRepository", "publishPluginPublicationToReleaseS3Repository"])
    releaseTask.description = "Release to OSSRH and S3"
    releaseTask.group = "Publishing"
}